{"name": "Add new product", "status": "failed", "statusDetails": {"message": "AssertionError: You are not login", "trace": "self = <PageObjects.product_page.ProductPage object at 0x0000021E68B33EB0>, how = 'css selector', what = '#menu'\n\n    @allure.step('Find element on the page')\n    def is_element_present(self, how, what):\n        try:\n>           self.browser.find_element(how, what)\n\n..\\PageObjects\\base_page.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"c9cec5383f8caa49bf50d8a6c126c549\")>, by = 'css selector', value = '#menu'\n\n    def find_element(self, by=By.ID, value=None):\n        \"\"\"\n        Find an element given a By strategy and locator. Prefer the find_element_by_* methods when\n        possible.\n    \n        :Usage:\n            element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if self.w3c:\n            if by == By.ID:\n                by = By.CSS_SELECTOR\n                value = '[id=\"%s\"]' % value\n            elif by == By.TAG_NAME:\n                by = By.CSS_SELECTOR\n            elif by == By.CLASS_NAME:\n                by = By.CSS_SELECTOR\n                value = \".%s\" % value\n            elif by == By.NAME:\n                by = By.CSS_SELECTOR\n                value = '[name=\"%s\"]' % value\n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:976: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"c9cec5383f8caa49bf50d8a6c126c549\")>, driver_command = 'findElement', params = {'using': 'css selector', 'value': '#menu'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021E69272D70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#16 0x55789743f788 \\\\u003Cunknown>\\\\n#17 0x557897459f1d \\\\u003Cunknown>\\\\n#18 0x7fecac8b0609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#menu\"}\nE         (Session info: chrome=102.0.5005.61)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <PageObjects.product_page.ProductPage object at 0x0000021E68B33EB0>\n\n    @allure.step('Check that login is success')\n    def should_be_success_login(self):\n        try:\n>           self.is_element_present(*ProductPageLocators.MENU)\n\n..\\PageObjects\\product_page.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = (<PageObjects.product_page.ProductPage object at 0x0000021E68B33EB0>, 'css selector', '#menu'), kw = {}, __tracebackhide__ = True\nparams = OrderedDict([('how', \"'css selector'\"), ('what', \"'#menu'\")]), args = ['<PageObjects.product_page.ProductPage object at 0x0000021E68B33EB0>', \"'css selector'\", \"'#menu'\"]\n\n    @wraps(func)\n    def impl(*a, **kw):\n        __tracebackhide__ = True\n        params = func_parameters(func, *a, **kw)\n        args = list(map(lambda x: represent(x), a))\n        with StepContext(self.title.format(*args, **params), params):\n>           return func(*a, **kw)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\allure_commons\\_allure.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PageObjects.product_page.ProductPage object at 0x0000021E68B33EB0>, how = 'css selector', what = '#menu'\n\n    @allure.step('Find element on the page')\n    def is_element_present(self, how, what):\n        try:\n            self.browser.find_element(how, what)\n            self.logger.info(f'Element ({what}) is present on the page')\n            return True\n        except:\n            try:\n                return False\n            finally:\n                self.allure_attach()\n                self.logger.error(f'Element ({what}) is not found')\n>               raise AssertionError(f'Element ({what}) is not found')\nE               AssertionError: Element (#menu) is not found\n\n..\\PageObjects\\base_page.py:32: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"c9cec5383f8caa49bf50d8a6c126c549\")>, base_url = 'http://192.168.0.190:8081/'\n\n    @allure.step('Test add new product')\n    @allure.feature('Product page')\n    @allure.title('Add new product')\n    @pytest.mark.add_product\n    def test_add_product(browser, base_url):\n        \"\"\"\n        Проверка добавления нового продукта в магазин.\n        1. Переход в админку\n        2. Логин\n        3. Проверка успешности входа в систему\n        4. Добавление нового продукта\n        5. Проверка успешности добавления продукта\n        \"\"\"\n        product_page = ProductPage(browser, base_url + '/admin')\n        product_page.open()\n        product_page.login()\n>       product_page.should_be_success_login()\n\ntest_product_page.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PageObjects.product_page.ProductPage object at 0x0000021E68B33EB0>\n\n    @allure.step('Check that login is success')\n    def should_be_success_login(self):\n        try:\n            self.is_element_present(*ProductPageLocators.MENU)\n            self.logger.info('Login successfully')\n        except:\n            self.allure_attach()\n            self.logger.error('You are not login')\n>           raise AssertionError('You are not login')\nE           AssertionError: You are not login\n\n..\\PageObjects\\product_page.py:96: AssertionError"}, "description": "\n    Проверка добавления нового продукта в магазин.\n    1. Переход в админку\n    2. Логин\n    3. Проверка успешности входа в систему\n    4. Добавление нового продукта\n    5. Проверка успешности добавления продукта\n    ", "steps": [{"name": "Test add new product", "status": "failed", "statusDetails": {"message": "AssertionError: You are not login\n", "trace": "  File \"C:\\Users\\Vlad\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Vlad\\PycharmProjects\\Otus\\homework7\\tests\\test_product_page.py\", line 22, in test_add_product\n    product_page.should_be_success_login()\n  File \"C:\\Users\\Vlad\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Vlad\\PycharmProjects\\Otus\\homework7\\PageObjects\\product_page.py\", line 96, in should_be_success_login\n    raise AssertionError('You are not login')\n"}, "steps": [{"name": "Open URL", "status": "passed", "start": 1656781886400, "stop": 1656781886616}, {"name": "Login", "status": "passed", "steps": [{"name": "Find element on the page", "status": "passed", "parameters": [{"name": "how", "value": "'css selector'"}, {"name": "what", "value": "'#input-username'"}], "start": 1656781886617, "stop": 1656781886643}, {"name": "Find element on the page", "status": "passed", "parameters": [{"name": "how", "value": "'css selector'"}, {"name": "what", "value": "'#input-password'"}], "start": 1656781886831, "stop": 1656781886852}, {"name": "Find element on the page", "status": "passed", "parameters": [{"name": "how", "value": "'css selector'"}, {"name": "what", "value": "'button'"}], "start": 1656781887025, "stop": 1656781887047}], "start": 1656781886617, "stop": 1656781887278}, {"name": "Check that login is success", "status": "failed", "statusDetails": {"message": "AssertionError: You are not login\n", "trace": "  File \"C:\\Users\\Vlad\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Vlad\\PycharmProjects\\Otus\\homework7\\PageObjects\\product_page.py\", line 96, in should_be_success_login\n    raise AssertionError('You are not login')\n"}, "steps": [{"name": "Find element on the page", "status": "failed", "statusDetails": {"message": "AssertionError: Element (#menu) is not found\n", "trace": "  File \"C:\\Users\\Vlad\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Vlad\\PycharmProjects\\Otus\\homework7\\PageObjects\\base_page.py\", line 32, in is_element_present\n    raise AssertionError(f'Element ({what}) is not found')\n"}, "attachments": [{"name": "ProductPage", "source": "dd982160-dad4-4e54-84a1-66babdfa2119-attachment.png", "type": "image/png"}], "parameters": [{"name": "how", "value": "'css selector'"}, {"name": "what", "value": "'#menu'"}], "start": 1656781887279, "stop": 1656781887441}], "attachments": [{"name": "ProductPage", "source": "9b1abd42-2616-4ea7-a31b-d1d481577bbb-attachment.png", "type": "image/png"}], "start": 1656781887279, "stop": 1656781887589}], "parameters": [{"name": "browser", "value": "<selenium.webdriver.remote.webdriver.WebDriver (session=\"c9cec5383f8caa49bf50d8a6c126c549\")>"}, {"name": "base_url", "value": "'http://192.168.0.190:8081/'"}], "start": 1656781886400, "stop": 1656781887590}], "attachments": [{"name": "log", "source": "c0a4aaf0-fa27-43a4-a853-51a880c5f0aa-attachment.txt", "type": "text/plain"}], "start": 1656781886399, "stop": 1656781887592, "uuid": "8117ba2a-bd31-4609-adc5-409ad1130b7d", "historyId": "ef9d426b5de291bf2b2f08a8bb60c252", "testCaseId": "567064b7d0b981a572f6c79b2c75b20f", "fullName": "tests.test_product_page#test_add_product", "labels": [{"name": "feature", "value": "Product page"}, {"name": "tag", "value": "add_product"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_product_page"}, {"name": "host", "value": "Lord"}, {"name": "thread", "value": "2228-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_product_page"}]}