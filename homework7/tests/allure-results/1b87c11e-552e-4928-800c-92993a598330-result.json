{"name": "Test that description actions is present", "status": "failed", "statusDetails": {"message": "AssertionError: URL http://localhost:8081/admin is not found", "trace": "self = <PageObjects.admin_page.AdminPage object at 0x000001F20D760520>\n\n    @allure.step(f'Open URL')\n    def open(self):\n        try:\n            self.logger.info(f'Open URL: {self.base_url}')\n>           self.browser.get(self.base_url)\n\n..\\PageObjects\\base_page.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"494c25e5d80e888ae744c5609938c4be\")>\nurl = 'http://localhost:8081/admin'\n\n    def get(self, url):\n        \"\"\"\n        Loads a web page in the current browser session.\n        \"\"\"\n>       self.execute(Command.GET, {'url': url})\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:333: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"494c25e5d80e888ae744c5609938c4be\")>\ndriver_command = 'get', params = {'url': 'http://localhost:8081/admin'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F20D760460>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#22 0x55fa1ad88788 \\\\u003Cunknown>\\\\n#23 0x55fa1ada2f1d \\\\u003Cunknown>\\\\n#24 0x7f3f707ac609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome=102.0.5005.61)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"494c25e5d80e888ae744c5609938c4be\")>\nbase_url = 'http://localhost:8081/'\n\n    @allure.step('Test that description actions is present')\n    @allure.feature('Admin page')\n    @allure.title('Test that description actions is present')\n    @pytest.mark.description_actions\n    def test_description_actions(browser, base_url):\n        page_admin = AdminPage(browser, base_url + 'admin')\n>       page_admin.open()\n\ntest_admin_page.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <PageObjects.admin_page.AdminPage object at 0x000001F20D760520>\n\n    @allure.step(f'Open URL')\n    def open(self):\n        try:\n            self.logger.info(f'Open URL: {self.base_url}')\n            self.browser.get(self.base_url)\n        except:\n            self.allure_attach()\n            self.logger.info(f'URL {self.base_url} is not found')\n>           raise AssertionError(f'URL {self.base_url} is not found')\nE           AssertionError: URL http://localhost:8081/admin is not found\n\n..\\PageObjects\\base_page.py:18: AssertionError"}, "steps": [{"name": "Test that description actions is present", "status": "failed", "statusDetails": {"message": "AssertionError: URL http://localhost:8081/admin is not found\n", "trace": "  File \"C:\\Users\\Vlad\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Vlad\\PycharmProjects\\Otus\\homework7\\tests\\test_admin_page.py\", line 12, in test_description_actions\n    page_admin.open()\n  File \"C:\\Users\\Vlad\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Vlad\\PycharmProjects\\Otus\\homework7\\PageObjects\\base_page.py\", line 18, in open\n    raise AssertionError(f'URL {self.base_url} is not found')\n"}, "steps": [{"name": "Open URL", "status": "failed", "statusDetails": {"message": "AssertionError: URL http://localhost:8081/admin is not found\n", "trace": "  File \"C:\\Users\\Vlad\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Vlad\\PycharmProjects\\Otus\\homework7\\PageObjects\\base_page.py\", line 18, in open\n    raise AssertionError(f'URL {self.base_url} is not found')\n"}, "attachments": [{"name": "AdminPage", "source": "d948b1cc-5929-483b-b4f7-630587084e90-attachment.png", "type": "image/png"}], "start": 1656772254349, "stop": 1656772254925}], "parameters": [{"name": "browser", "value": "<selenium.webdriver.remote.webdriver.WebDriver (session=\"494c25e5d80e888ae744c5609938c4be\")>"}, {"name": "base_url", "value": "'http://localhost:8081/'"}], "start": 1656772254349, "stop": 1656772254927}], "attachments": [{"name": "log", "source": "6eea084f-dc65-46ef-a15d-14f30fa20840-attachment.txt", "type": "text/plain"}], "start": 1656772254348, "stop": 1656772254928, "uuid": "6199a0e7-a57d-4687-8f3c-a118887a96e8", "historyId": "23828c980de193d94e091b654b298ab4", "testCaseId": "7e0a3402f6c73278ca16ff1a77744866", "fullName": "tests.test_admin_page#test_description_actions", "labels": [{"name": "feature", "value": "Admin page"}, {"name": "tag", "value": "description_actions"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_admin_page"}, {"name": "host", "value": "Lord"}, {"name": "thread", "value": "9436-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_admin_page"}]}