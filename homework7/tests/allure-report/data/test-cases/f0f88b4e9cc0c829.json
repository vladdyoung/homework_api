{"uid":"f0f88b4e9cc0c829","name":"Test change currency","fullName":"tests.test_currency#test_currency_toggle","historyId":"619b97f470c3f1d7e7d2eaff1fa2d141","time":{"start":1656772949546,"stop":1656772950725,"duration":1179},"status":"failed","statusMessage":"AssertionError: Currency is not change!","statusTrace":"self = <PageObjects.currency.Currency object at 0x0000018FC94C4E20>, how = 'css selector', what = '[name=\"EUR\"]'\n\n    @allure.step('Find element on the page')\n    def is_element_present(self, how, what):\n        try:\n>           self.browser.find_element(how, what)\n\n..\\PageObjects\\base_page.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"29bfa09a297019325c9271caed862248\")>, by = 'css selector', value = '[name=\"EUR\"]'\n\n    def find_element(self, by=By.ID, value=None):\n        \"\"\"\n        Find an element given a By strategy and locator. Prefer the find_element_by_* methods when\n        possible.\n    \n        :Usage:\n            element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if self.w3c:\n            if by == By.ID:\n                by = By.CSS_SELECTOR\n                value = '[id=\"%s\"]' % value\n            elif by == By.TAG_NAME:\n                by = By.CSS_SELECTOR\n            elif by == By.CLASS_NAME:\n                by = By.CSS_SELECTOR\n                value = \".%s\" % value\n            elif by == By.NAME:\n                by = By.CSS_SELECTOR\n                value = '[name=\"%s\"]' % value\n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:976: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"29bfa09a297019325c9271caed862248\")>, driver_command = 'findElement', params = {'using': 'css selector', 'value': '[name=\"EUR\"]'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018FC92FAD40>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#16 0x55aa89a52788 \\\\u003Cunknown>\\\\n#17 0x55aa89a6cf1d \\\\u003Cunknown>\\\\n#18 0x7f9f037e0609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[name=\"EUR\"]\"}\nE         (Session info: chrome=102.0.5005.61)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <PageObjects.currency.Currency object at 0x0000018FC94C4E20>\n\n    @allure.step('Check change currency')\n    def change_currency_on_dollar(self):\n        try:\n            self.logger.info(f'Find element {CurrencyLocators.CURRENT_CURRENCY}')\n            self.is_element_present(*CurrencyLocators.CURRENT_CURRENCY)\n            old_currency = self.browser.find_element(*CurrencyLocators.CURRENT_CURRENCY).text\n            self.logger.info(f'Find element {CurrencyLocators.BTN_CURRENCY}')\n            self.is_element_present(*CurrencyLocators.BTN_CURRENCY)\n            btn_currency = self.browser.find_element(*CurrencyLocators.BTN_CURRENCY).click()\n            self.logger.info(f'Find element {CurrencyLocators.EURO}')\n>           self.is_element_present(*CurrencyLocators.EURO)\n\n..\\PageObjects\\currency.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = (<PageObjects.currency.Currency object at 0x0000018FC94C4E20>, 'css selector', '[name=\"EUR\"]'), kw = {}, __tracebackhide__ = True\nparams = OrderedDict([('how', \"'css selector'\"), ('what', '\\'[name=\"EUR\"]\\'')]), args = ['<PageObjects.currency.Currency object at 0x0000018FC94C4E20>', \"'css selector'\", '\\'[name=\"EUR\"]\\'']\n\n    @wraps(func)\n    def impl(*a, **kw):\n        __tracebackhide__ = True\n        params = func_parameters(func, *a, **kw)\n        args = list(map(lambda x: represent(x), a))\n        with StepContext(self.title.format(*args, **params), params):\n>           return func(*a, **kw)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\allure_commons\\_allure.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PageObjects.currency.Currency object at 0x0000018FC94C4E20>, how = 'css selector', what = '[name=\"EUR\"]'\n\n    @allure.step('Find element on the page')\n    def is_element_present(self, how, what):\n        try:\n            self.browser.find_element(how, what)\n            self.logger.info(f'Element ({what}) is present on the page')\n            return True\n        except:\n            try:\n                return False\n            finally:\n                self.allure_attach()\n                self.logger.error(f'Element ({what}) is not found')\n>               raise AssertionError(f'Element ({what}) is not found')\nE               AssertionError: Element ([name=\"EUR\"]) is not found\n\n..\\PageObjects\\base_page.py:32: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"29bfa09a297019325c9271caed862248\")>, base_url = 'http://192.168.0.190:8081/'\n\n    @allure.step('Test change currency')\n    @allure.feature('Currency')\n    @allure.title('Test change currency')\n    @pytest.mark.currency_toggle\n    def test_currency_toggle(browser, base_url):\n        currency = Currency(browser, base_url)\n        currency.open()\n>       currency.change_currency_on_dollar()\n\ntest_currency.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PageObjects.currency.Currency object at 0x0000018FC94C4E20>\n\n    @allure.step('Check change currency')\n    def change_currency_on_dollar(self):\n        try:\n            self.logger.info(f'Find element {CurrencyLocators.CURRENT_CURRENCY}')\n            self.is_element_present(*CurrencyLocators.CURRENT_CURRENCY)\n            old_currency = self.browser.find_element(*CurrencyLocators.CURRENT_CURRENCY).text\n            self.logger.info(f'Find element {CurrencyLocators.BTN_CURRENCY}')\n            self.is_element_present(*CurrencyLocators.BTN_CURRENCY)\n            btn_currency = self.browser.find_element(*CurrencyLocators.BTN_CURRENCY).click()\n            self.logger.info(f'Find element {CurrencyLocators.EURO}')\n            self.is_element_present(*CurrencyLocators.EURO)\n            euro = self.browser.find_element(*CurrencyLocators.EURO).click()\n            self.is_element_present(*CurrencyLocators.NEW_CURRENCY)\n            new_currency = self.browser.find_element(*CurrencyLocators.NEW_CURRENCY).text\n            self.should_be_match_currency(old_currency, new_currency)\n        except:\n            self.allure_attach()\n            self.logger.error('Currency is not change!')\n>           raise AssertionError('Currency is not change!')\nE           AssertionError: Currency is not change!\n\n..\\PageObjects\\currency.py:26: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1656772947322,"stop":1656772949545,"duration":2223},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1656772949545,"stop":1656772949545,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Currency is not change!","statusTrace":"self = <PageObjects.currency.Currency object at 0x0000018FC94C4E20>, how = 'css selector', what = '[name=\"EUR\"]'\n\n    @allure.step('Find element on the page')\n    def is_element_present(self, how, what):\n        try:\n>           self.browser.find_element(how, what)\n\n..\\PageObjects\\base_page.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"29bfa09a297019325c9271caed862248\")>, by = 'css selector', value = '[name=\"EUR\"]'\n\n    def find_element(self, by=By.ID, value=None):\n        \"\"\"\n        Find an element given a By strategy and locator. Prefer the find_element_by_* methods when\n        possible.\n    \n        :Usage:\n            element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if self.w3c:\n            if by == By.ID:\n                by = By.CSS_SELECTOR\n                value = '[id=\"%s\"]' % value\n            elif by == By.TAG_NAME:\n                by = By.CSS_SELECTOR\n            elif by == By.CLASS_NAME:\n                by = By.CSS_SELECTOR\n                value = \".%s\" % value\n            elif by == By.NAME:\n                by = By.CSS_SELECTOR\n                value = '[name=\"%s\"]' % value\n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:976: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"29bfa09a297019325c9271caed862248\")>, driver_command = 'findElement', params = {'using': 'css selector', 'value': '[name=\"EUR\"]'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018FC92FAD40>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#16 0x55aa89a52788 \\\\u003Cunknown>\\\\n#17 0x55aa89a6cf1d \\\\u003Cunknown>\\\\n#18 0x7f9f037e0609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[name=\"EUR\"]\"}\nE         (Session info: chrome=102.0.5005.61)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <PageObjects.currency.Currency object at 0x0000018FC94C4E20>\n\n    @allure.step('Check change currency')\n    def change_currency_on_dollar(self):\n        try:\n            self.logger.info(f'Find element {CurrencyLocators.CURRENT_CURRENCY}')\n            self.is_element_present(*CurrencyLocators.CURRENT_CURRENCY)\n            old_currency = self.browser.find_element(*CurrencyLocators.CURRENT_CURRENCY).text\n            self.logger.info(f'Find element {CurrencyLocators.BTN_CURRENCY}')\n            self.is_element_present(*CurrencyLocators.BTN_CURRENCY)\n            btn_currency = self.browser.find_element(*CurrencyLocators.BTN_CURRENCY).click()\n            self.logger.info(f'Find element {CurrencyLocators.EURO}')\n>           self.is_element_present(*CurrencyLocators.EURO)\n\n..\\PageObjects\\currency.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = (<PageObjects.currency.Currency object at 0x0000018FC94C4E20>, 'css selector', '[name=\"EUR\"]'), kw = {}, __tracebackhide__ = True\nparams = OrderedDict([('how', \"'css selector'\"), ('what', '\\'[name=\"EUR\"]\\'')]), args = ['<PageObjects.currency.Currency object at 0x0000018FC94C4E20>', \"'css selector'\", '\\'[name=\"EUR\"]\\'']\n\n    @wraps(func)\n    def impl(*a, **kw):\n        __tracebackhide__ = True\n        params = func_parameters(func, *a, **kw)\n        args = list(map(lambda x: represent(x), a))\n        with StepContext(self.title.format(*args, **params), params):\n>           return func(*a, **kw)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\allure_commons\\_allure.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PageObjects.currency.Currency object at 0x0000018FC94C4E20>, how = 'css selector', what = '[name=\"EUR\"]'\n\n    @allure.step('Find element on the page')\n    def is_element_present(self, how, what):\n        try:\n            self.browser.find_element(how, what)\n            self.logger.info(f'Element ({what}) is present on the page')\n            return True\n        except:\n            try:\n                return False\n            finally:\n                self.allure_attach()\n                self.logger.error(f'Element ({what}) is not found')\n>               raise AssertionError(f'Element ({what}) is not found')\nE               AssertionError: Element ([name=\"EUR\"]) is not found\n\n..\\PageObjects\\base_page.py:32: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"29bfa09a297019325c9271caed862248\")>, base_url = 'http://192.168.0.190:8081/'\n\n    @allure.step('Test change currency')\n    @allure.feature('Currency')\n    @allure.title('Test change currency')\n    @pytest.mark.currency_toggle\n    def test_currency_toggle(browser, base_url):\n        currency = Currency(browser, base_url)\n        currency.open()\n>       currency.change_currency_on_dollar()\n\ntest_currency.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PageObjects.currency.Currency object at 0x0000018FC94C4E20>\n\n    @allure.step('Check change currency')\n    def change_currency_on_dollar(self):\n        try:\n            self.logger.info(f'Find element {CurrencyLocators.CURRENT_CURRENCY}')\n            self.is_element_present(*CurrencyLocators.CURRENT_CURRENCY)\n            old_currency = self.browser.find_element(*CurrencyLocators.CURRENT_CURRENCY).text\n            self.logger.info(f'Find element {CurrencyLocators.BTN_CURRENCY}')\n            self.is_element_present(*CurrencyLocators.BTN_CURRENCY)\n            btn_currency = self.browser.find_element(*CurrencyLocators.BTN_CURRENCY).click()\n            self.logger.info(f'Find element {CurrencyLocators.EURO}')\n            self.is_element_present(*CurrencyLocators.EURO)\n            euro = self.browser.find_element(*CurrencyLocators.EURO).click()\n            self.is_element_present(*CurrencyLocators.NEW_CURRENCY)\n            new_currency = self.browser.find_element(*CurrencyLocators.NEW_CURRENCY).text\n            self.should_be_match_currency(old_currency, new_currency)\n        except:\n            self.allure_attach()\n            self.logger.error('Currency is not change!')\n>           raise AssertionError('Currency is not change!')\nE           AssertionError: Currency is not change!\n\n..\\PageObjects\\currency.py:26: AssertionError","steps":[{"name":"Test change currency","time":{"start":1656772949548,"stop":1656772950723,"duration":1175},"status":"failed","statusMessage":"AssertionError: Currency is not change!\n","statusTrace":"  File \"C:\\Users\\Vlad\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Vlad\\PycharmProjects\\Otus\\homework7\\tests\\test_currency.py\", line 13, in test_currency_toggle\n    currency.change_currency_on_dollar()\n  File \"C:\\Users\\Vlad\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Vlad\\PycharmProjects\\Otus\\homework7\\PageObjects\\currency.py\", line 26, in change_currency_on_dollar\n    raise AssertionError('Currency is not change!')\n","steps":[{"name":"Open URL","time":{"start":1656772949548,"stop":1656772950059,"duration":511},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"Check change currency","time":{"start":1656772950060,"stop":1656772950722,"duration":662},"status":"failed","statusMessage":"AssertionError: Currency is not change!\n","statusTrace":"  File \"C:\\Users\\Vlad\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Vlad\\PycharmProjects\\Otus\\homework7\\PageObjects\\currency.py\", line 26, in change_currency_on_dollar\n    raise AssertionError('Currency is not change!')\n","steps":[{"name":"Find element on the page","time":{"start":1656772950061,"stop":1656772950088,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"how","value":"'css selector'"},{"name":"what","value":"'.btn-link.dropdown-toggle strong'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true},{"name":"Find element on the page","time":{"start":1656772950151,"stop":1656772950173,"duration":22},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"how","value":"'css selector'"},{"name":"what","value":"'.btn-link.dropdown-toggle'"}],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true},{"name":"Find element on the page","time":{"start":1656772950435,"stop":1656772950591,"duration":156},"status":"failed","statusMessage":"AssertionError: Element ([name=\"EUR\"]) is not found\n","statusTrace":"  File \"C:\\Users\\Vlad\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Vlad\\PycharmProjects\\Otus\\homework7\\PageObjects\\base_page.py\", line 32, in is_element_present\n    raise AssertionError(f'Element ({what}) is not found')\n","steps":[],"attachments":[{"uid":"8abf778848caefe","name":"Currency","source":"8abf778848caefe.png","type":"image/png","size":28155}],"parameters":[{"name":"how","value":"'css selector'"},{"name":"what","value":"'[name=\"EUR\"]'"}],"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true}],"attachments":[{"uid":"492fc94a4a12fce6","name":"Currency","source":"492fc94a4a12fce6.png","type":"image/png","size":28155}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"stepsCount":3,"hasContent":true}],"attachments":[],"parameters":[{"name":"browser","value":"<selenium.webdriver.remote.webdriver.WebDriver (session=\"29bfa09a297019325c9271caed862248\")>"},{"name":"base_url","value":"'http://192.168.0.190:8081/'"}],"attachmentsCount":2,"shouldDisplayMessage":false,"stepsCount":5,"hasContent":true}],"attachments":[{"uid":"28dec0481af6d6e5","name":"log","source":"28dec0481af6d6e5.txt","type":"text/plain","size":1115}],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":true,"stepsCount":6,"hasContent":true},"afterStages":[{"name":"browser::0","time":{"start":1656772951006,"stop":1656772951122,"duration":116},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Currency"},{"name":"tag","value":"currency_toggle"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_currency"},{"name":"host","value":"Lord"},{"name":"thread","value":"11368-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_currency"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["currency_toggle"]},"source":"f0f88b4e9cc0c829.json","parameterValues":[]}